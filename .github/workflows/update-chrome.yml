# GitHub Actions Workflow to Automatically Update the Google Chrome Flatpak Manifest
#
# Description:
# This workflow runs on a daily schedule, fetches the official RPM repository metadata,
# and checks for a new version of Google Chrome. If an update is found, it uses
# the 'template.yaml' to generate a new manifest and commits it to the repository.
#
name: 'Update Google Chrome'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on a schedule (at 05:00 UTC every day)
  schedule:
    - cron: '0 5 * * *'

jobs:
  update-manifest:
    runs-on: ubuntu-latest
    # Grant write permissions to the repository for the GITHUB_TOKEN.
    # This is required for the action to commit and push changes.
    permissions:
      contents: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Fetch and Parse Debian Packages file'
        id: parse_package
        run: |
          # Download the Packages file from Google's Debian repository
          curl -sL https://dl.google.com/linux/chrome/deb/dists/stable/main/binary-amd64/Packages -o Packages.txt

          # Use awk to parse the file for the 'google-chrome-stable' package.
          # RS="" treats each package block (separated by blank lines) as a single record.
          PACKAGE_INFO=$(awk 'BEGIN{RS=""} /Package: google-chrome-stable/{print}' Packages.txt)

          # Extract the required fields from the package block
          VERSION=$(echo "$PACKAGE_INFO" | grep '^Version:' | awk '{print $2}')
          FILENAME=$(echo "$PACKAGE_INFO" | grep '^Filename:' | awk '{print $2}')
          CHECKSUM=$(echo "$PACKAGE_INFO" | grep '^SHA256:' | awk '{print $2}')

          echo "Found Version: $VERSION"
          echo "Found Filename: $FILENAME"
          echo "Found Checksum: $CHECKSUM"

          # Set outputs for subsequent steps
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT
          echo "checksum=${CHECKSUM}" >> $GITHUB_OUTPUT

      - name: 'Check if update is needed'
        id: check_checksum
        run: |
          # Read the checksum of the currently packaged version
          CURRENT_CHECKSUM=$(cat CHECKSUM.txt)
          NEW_CHECKSUM=${{ steps.parse_package.outputs.checksum }}

          if [ "$CURRENT_CHECKSUM" = "$NEW_CHECKSUM" ]; then
            echo "No new version of Google Chrome found."
            exit 0 # Exit successfully without doing anything else
          else
            echo "New version of Google Chrome found. Continuing..."
          fi

      - name: 'Update Manifest and Checksum File'
        run: |
          # Update the checksum file with the new version's hash
          echo "${{ steps.parse_package.outputs.checksum }}" > CHECKSUM.txt

          # Rename the existing manifest to a template if it doesn't exist
          if [ ! -f template.yaml ]; then
            mv com.google.Chrome.yaml template.yaml
          fi

          # Read the template and replace placeholders
          sed -e "s|\$VERSION|${{ steps.parse_package.outputs.version }}|g" \
              -e "s|\$FILENAME|${{ steps.parse_package.outputs.filename }}|g" \
              -e "s|\$CHECKSUM|${{ steps.parse_package.outputs.checksum }}|g" \
              template.yaml > com.google.Chrome.yaml

          echo "Generated com.google.Chrome.yaml"

      - name: 'Commit and Push Changes'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add com.google.Chrome.yaml CHECKSUM.txt
          git commit -m "Push new version: ${{ steps.parse_package.outputs.version }}"
          git push
